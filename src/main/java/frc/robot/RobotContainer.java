// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.commands.AutonomousCommand;
import frc.robot.commands.LimeLightTurn;
import frc.robot.commands.driveWithJoyStick;
import frc.robot.commands.reverseAquisition;
import frc.robot.commands.setHoodToZero;
import frc.robot.commands.shiftDown;
import frc.robot.commands.shiftUp;
import frc.robot.commands.spinUp;
import frc.robot.commands.startAcquisition;
import frc.robot.commands.startShooter;
import frc.robot.commands.stopFlyWheel;
import frc.robot.commands.stopShooting;
import frc.robot.commands.stopTeleopAutoShoot;
import frc.robot.commands.teleopAutoShootCMD;
import frc.robot.commands.testShootMotor;
import frc.robot.subsystems.BallAcquisition;
import frc.robot.subsystems.BallIndexer;
import frc.robot.subsystems.BallShooter;
import frc.robot.subsystems.DriveTrain;
import frc.robot.subsystems.Shifter;

/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    private final Shifter m_shifter = new Shifter();
    private final BallShooter m_ballShooter = new BallShooter();
    private final BallIndexer m_ballIndexer = new BallIndexer();
    private final BallAcquisition m_ballAcquisition = new BallAcquisition();
    private final DriveTrain m_driveTrain = new DriveTrain();

// Joysticks
private final Joystick accessoriesJoystick = new Joystick(1);
private final Joystick driveJoystick = new Joystick(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("testShootMotor", new testShootMotor());
    SmartDashboard.putData("teleopAutoShootCMD", new teleopAutoShootCMD( m_ballShooter ));
    SmartDashboard.putData("setHoodToZero", new setHoodToZero( m_ballShooter ));
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_driveTrain.setDefaultCommand(new driveWithJoyStick( m_driveTrain ) );


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.addOption("Autonomous Command", new AutonomousCommand());
    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton btnStopTeleopAutoShoot = new JoystickButton(accessoriesJoystick, 1);        
btnStopTeleopAutoShoot.whenReleased(new stopTeleopAutoShoot( m_ballShooter ) ,true);
    SmartDashboard.putData("btnStopTeleopAutoShoot",new stopTeleopAutoShoot( m_ballShooter ) );

final JoystickButton btnTeleopAutoShoot = new JoystickButton(accessoriesJoystick, 1);        
btnTeleopAutoShoot.whileHeld(new teleopAutoShootCMD( m_ballShooter ) ,true);
    SmartDashboard.putData("btnTeleopAutoShoot",new teleopAutoShootCMD( m_ballShooter ) );

final JoystickButton btnStopFlyWheel = new JoystickButton(accessoriesJoystick, 4);        
btnStopFlyWheel.whenPressed(new stopFlyWheel( m_ballShooter ) ,true);
    SmartDashboard.putData("btnStopFlyWheel",new stopFlyWheel( m_ballShooter ) );

final JoystickButton btnSpinUp = new JoystickButton(accessoriesJoystick, 4);        
btnSpinUp.whileHeld(new spinUp( m_ballShooter ) ,true);
    SmartDashboard.putData("btnSpinUp",new spinUp( m_ballShooter ) );

final JoystickButton btnLimeLightTurn = new JoystickButton(accessoriesJoystick, 3);        
btnLimeLightTurn.whenPressed(new LimeLightTurn( m_driveTrain ) ,true);
    SmartDashboard.putData("btnLimeLightTurn",new LimeLightTurn( m_driveTrain ) );

final JoystickButton btnStopShooting = new JoystickButton(accessoriesJoystick, 5);        
btnStopShooting.whenReleased(new stopShooting( m_ballShooter ) ,true);
    SmartDashboard.putData("btnStopShooting",new stopShooting( m_ballShooter ) );

final JoystickButton btnStartShooter = new JoystickButton(accessoriesJoystick, 5);        
btnStartShooter.whileHeld(new startShooter( m_ballShooter ) ,true);
    SmartDashboard.putData("btnStartShooter",new startShooter( m_ballShooter ) );

final JoystickButton btnZeroHood = new JoystickButton(driveJoystick, 10);        
btnZeroHood.whenPressed(new setHoodToZero( m_ballShooter ) ,true);
    SmartDashboard.putData("btnZeroHood",new setHoodToZero( m_ballShooter ) );

final JoystickButton btnShiftUp = new JoystickButton(driveJoystick, 12);        
btnShiftUp.whenPressed(new shiftUp( m_driveTrain ) ,true);
    SmartDashboard.putData("btnShiftUp",new shiftUp( m_driveTrain ) );

final JoystickButton btnShiftDown = new JoystickButton(driveJoystick, 11);        
btnShiftDown.whenPressed(new shiftDown( m_driveTrain ) ,true);
    SmartDashboard.putData("btnShiftDown",new shiftDown( m_driveTrain ) );

final JoystickButton btnReverseAcquire = new JoystickButton(driveJoystick, 2);        
btnReverseAcquire.whileHeld(new reverseAquisition() ,true);
    SmartDashboard.putData("btnReverseAcquire",new reverseAquisition() );

final JoystickButton btnAcquire = new JoystickButton(driveJoystick, 1);        
btnAcquire.whileHeld(new startAcquisition( m_ballAcquisition ) ,true);
    SmartDashboard.putData("btnAcquire",new startAcquisition( m_ballAcquisition ) );



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getDriveJoystick() {
        return driveJoystick;
    }

public Joystick getAccessoriesJoystick() {
        return accessoriesJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Shifter getShifter() {
        return m_shifter;
    }
    public BallIndexer getBallIndexer() {
        return m_ballIndexer;
    }
    public DriveTrain getDriveTrain() {
        return m_driveTrain;
    } 
    public BallShooter getBallShooter() {
        return m_ballShooter;
    }
    public BallAcquisition getBallAcquisition() {
        return m_ballAcquisition;
    }   
    /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

